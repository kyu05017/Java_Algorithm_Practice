[2강] 2025-01-04

    [2-1장] Array & List

        1. Array

            1. 선언방법
                int[] arr = new int[5];
                    1-1. 데이터의 형태
                        int[] (원시,객체 타입 모두 가능하다.)

                    1-2. 변수의 이름
                        arr (지정된 약어 또는 숫자, 지정된 특수문자가 아니라면 사용이 가능하다.)

                    1-3. new
                        Reference Value 로 지정되기 때문에 인스턴스를 주입한다.

                    1-4. int[]
                        배열이 크기를 지정한다.

            2. 출력하기
                2-1.arr 배열을 단순 출력하면 레퍼런스 주소가 나온다.
                    Ex) System.out.println(arr);
                    Ex) 주소값

                2-2.arr 배열을 출력하는 법
                    Ex) System.out.println(Arrays.toString(arr));
                    Ex) 초기값이 출력됨 [0,0,0,0,0];
                    String 객체는 초기값이 null
                    boolean 객체는 초기값이 false

                2-3. 값 삽입
                    배열을 선언 후 인덱스는 0으로 부터 시작한다.
                    Ex) arr[0] = 1;

                2-4. 삽입된 값 출력
                    Ex) System.out.println(arr[o])
                    Ex) 1

                2-5.배열의 길이 출력
                    Ex) System.out.println(arr.length);
                    Ex) 5

            3. String[] 배열 특징
                 스트링과 같이 오브젝트를 요소로 가지는 배열을 만들게 되면
                각 인덱스는 주소값을 가지게 되면 실제 정보는 메모리 어딘가에 저장이 되어
                찾아 쓰는 형태이다.

            4. Array 의 특징
                (장점) 4-1. 여러개의 같은 타입의 데이터를 한꺼번에 다룰 수 있다.
                (특징) 4-2. Array 는 Object 는 아니지만 Reference Value 로 취급된다.
                (특징) 4-3. 메모리상에 연달아 공산을 확보 합니다.
                (단점) 4-4. 미리 공간을 확보해 놓고 써야 합니다.
                    * 만들 때, 얼만틈의 배열의 크기를 사용할지 정해야 한다.
                (단점) 4-5. 한 번 만들어진 공간은 크기가 고정이 된다
                (장점) 4-6. 첫 번째 위치만 알면 index 로 상대적 위치를 빠르게 찾을 수 있다.

        2. List

            1.Linked List
                1-1.특징
                    메모리상 연달아 있지 않고 어딘가 저장된 메모리들 끼리 연결 해서 사용한다.

                1-2.추가 하기
                    마지막 요소에 새로운 요소를 링크로 연결해주면 된다.

                1-3.삭제 하기
                    중간 요소가 삭제 되더라도 새롭게 링크가 연결 되기 때문에 상관이 없다.
                    순서는 링크가 한쪽 방향으로 되어서 상관이 없다.

            2.Double Linked List
                Linked List 와 다르게 양방향 연결이기 때문에 양방향으로 왔다 갔다 찾아 갈수 있다.

            3.List 의 특징
                (장점) 3-1. 여러개의 데이터를 한꺼번에 다룰 수 있다.
                (장점) 3-2. 메모리상에 연속되지 않아도 된다.
                (장점) 3-3. 미리 공간을 확보해 놓지 않아도 된다.
                (장점) 3-4. 필요에 따라 데이터가 늘어나거나 줄어든다.
                (단점) 3-5. 첫 번째 위치로 부터 index 로 목표위치를 알려면 한칸 한칸 이동하면서 찾아야 한다.
                    * Array 에 비해서는 데이터를 찾아가는 속도가 느리다.

        3. 정리

            3-1.Array
                Array 는 메모리상으로 연속되어 있는 형태로 여러개의 데이터를 다루는 형태
                인덱스로 빠르게 찾을수 있고

                List 는 연속되지 않는 형태로 여러개를 데이터를 다루는 형태
                크기가 자유롭다.

    [2-2장] Linked List Document

        1. LinkedList class
            1. 형태
                LinkedList<E> - 제네릭을 사용

            2. 상속(Extend)하고 있는 객체(Class)
                java.lang.Object
                    java.util.AbstractCollection<E>
                        java.util.AbstractList<E>
                            java.util.AbstractSequentialList<E>
                                java.util.LinkedList<E>

            3. 구현(Implement)하고 있는 인터페이스(Interface)
                1. Serializable
                2. Cloneable
                3. Iterable<E>
                4. Collection<E>
                5. Deque<E>
                6. List<E>
                7. Queue<E>

            4. 생성자(Constructor)
                1. 빈생성자
                    LinkedList<>()

                2. LinkedList<>(Collection<? extend E> c)
                    초기값을 가질 수 있다.

            5. 메서드
                5-1. add(E element)
                    리스트의 가장 마지막 요소에 새로운 요소를 연결
                    1-1. 인자
                        같은 제네릭으로 사용된 값의 요소
                    1-2. 반환
                        boolean a

                5-2. add(int idx, E element)
                    지정한 위치(index)에 요소를 추가, 이전에 있던 요소는 한칸씩 뒤로 밀림
                    1-1. 인자
                        1. int idx
                            삽입하고자 하는 곳의 위치(index)
                        2. E element
                            같은 제네릭으로 사용된 값의 요소

                5-3. addAll(Collection<? extend E> c)
                    리스트의 가장 마지막에 기존 선언된 같은 제네틱의 리스트를 추가
                    1-1. 인자
                        같은 제네릭을 사용하는 리스트

                    1-2. 반환
                        boolean a

                5-4. addAll(int idx, Collection<? extend E> c)
                    지정한 위치(index)에 여러개의 요소를 추가, 이전에 있던 요소는 한칸씩 뒤로 밀림
                    1-1. 인자
                        1. int idx
                            삽입하고자 하는 곳의 위치(index)
                        2. Collection<? extend E> c
                            같은 제네릭을 사용하는 리스트

                5-5. addFirst(E element)
                    가장 앞에 요소를 추가
                    1-1. 인자
                        같은 제네릭으로 사용된 값의 요소

                5-6. addLast(E element)
                    가장 마지막위치에 요소를 추가 [ add(E element) 와 동작이 동일 ]
                    1-1. 인자
                        같은 제네릭으로 사용된 값의 요소

                5-7. clear()
                    모든 값을 삭제

                5-8. contains(Object o)
                    찾고자하는 데이터가 리스트안에 존재하는지.
                    1-1. 인자
                        Object o

                5-9. element()
                    잘사용하지는 않지만, 가장 첫번째 요소를 가져온다
                    1-1. 반환
                        지정한 제네릭의 객체의 값

                5-10. get(int idx)
                    인자로 넣은 인덱스의 값을 반환
                    1-1. 인자
                        1. int idx
                            찾고자 하는 위치의 인덱스 번호
                    1-2. 반환
                        1. E element
                            리스트내에 해당하는 인덱스 번호의 값

                5-11. getFirst()
                    리스트의 가장 앞 값을 가져온다
                    1. 반환
                        1. E element
                            리스트 내의 가장 앞 값을 가져온다.

                5-12. getLast()
                    리스트의 가장 마지막 값을 가져온다.
                    1. 반환
                        1. E element
                            리스트 내의 가장 마지막 값을 가져온다.

                5-13
